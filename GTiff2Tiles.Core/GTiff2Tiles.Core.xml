<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GTiff2Tiles.Core</name>
    </assembly>
    <members>
        <member name="T:GTiff2Tiles.Core.Constants.DateTimePatterns">
            <summary>
            String patterns for <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.DateTimePatterns.LongWithMs">
            <summary>
            Year, month, date, hour, minutes, seconds, ms
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.DateTimePatterns.ShortToDate">
            <summary>
            Year, month and date
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.DateTimePatterns.ShortToMonth">
            <summary>
            Year and month
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Constants.FileExtensions">
            <summary>
            Used extensions
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.FileExtensions.Png">
            <summary>
            .png
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.FileExtensions.Tif">
            <summary>
            .tif
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.FileExtensions.Jpg">
            <summary>
            .jpg
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.FileExtensions.Webp">
            <summary>
            .webp
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Constants.Geodesic">
            <summary>
            Some geo-related constants
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Geodesic.EquatorRadius">
            <summary>
            Radius of Earth, measured at equator
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Geodesic.PolarRadius">
            <summary>
            Redius of Earth, measured at pole
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Geodesic.OriginShift">
            <summary>
            Approximately 20037508.342789244
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Constants.Interpolations">
            <summary>
            Represents the interpolation algorithms
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Interpolations.Nearest">
            <summary>
            Nearest-neighbour interpolation
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Interpolations.Linear">
            <summary>
            Linear interpolation
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Interpolations.Cubic">
            <summary>
            Cubic interpolation
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Interpolations.Mitchell">
            <summary>
            Mitchell
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Interpolations.Lanczos2">
            <summary>
            Two-lobe Lanczos
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Interpolations.Lanczos3">
            <summary>
            Three-lobe Lanczos
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Constants.Proj">
            <summary>
            Proj constants
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Proj.MercFull">
            <summary>
            Full PROJ string for Spherical Mercator (EPSG:3857) projection
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Proj.LongLatFull">
            <summary>
            Full PROJ string for LongLat (EPSG:4326) projection
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Proj.NoDefs">
            <summary>
            +no_defs
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Proj.ProjMerc">
            <summary>
            +proj=merc
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Proj.ProjLongLat">
            <summary>
            +proj=longlat
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Proj.DatumWgs84">
            <summary>
            For EPSG:4326 AND World Mercator, BUT not Spherical Mercator (EPSG:3857)
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Coordinates.Coordinate">
            <summary>
            Basic realisation of <see cref="T:GTiff2Tiles.Core.Coordinates.ICoordinate"/> interface
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Coordinates.Coordinate.X">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Coordinates.Coordinate.Y">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Create instance of class
            </summary>
            <param name="x">X coordinate value</param>
            <param name="y">Y coordinate value</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.ToNumber(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.DegreesToRadians(System.Double)">
            <summary>
            Converts degrees to radians
            </summary>
            <param name="degrees">Value to convert</param>
            <returns>Converted radians</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.RadiansToDegrees(System.Double)">
            <summary>
            Converts radians to degrees
            </summary>
            <param name="radians">Value to convert</param>
            <returns>Converted degrees</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.Equals(GTiff2Tiles.Core.Coordinates.ICoordinate)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.op_Equality(GTiff2Tiles.Core.Coordinates.Coordinate,GTiff2Tiles.Core.Coordinates.Coordinate)">
            <summary>
            Check two coordinates for equality
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns><see langword="true"/> if coordinates are equal;
            <see langword="false"/>otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.op_Inequality(GTiff2Tiles.Core.Coordinates.Coordinate,GTiff2Tiles.Core.Coordinates.Coordinate)">
            <summary>
            Check two coordinates for non-equality
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns><see langword="true"/> if coordinates are not equal;
            <see langword="false"/>otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.op_Addition(GTiff2Tiles.Core.Coordinates.Coordinate,GTiff2Tiles.Core.Coordinates.Coordinate)">
            <summary>
            Sum coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.Add(GTiff2Tiles.Core.Coordinates.Coordinate)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Coordinates.Coordinate.op_Addition(GTiff2Tiles.Core.Coordinates.Coordinate,GTiff2Tiles.Core.Coordinates.Coordinate)"/>
            <param name="other"><see cref="T:GTiff2Tiles.Core.Coordinates.Coordinate"/> to add</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.op_Subtraction(GTiff2Tiles.Core.Coordinates.Coordinate,GTiff2Tiles.Core.Coordinates.Coordinate)">
            <summary>
            Subtruct coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.Subtract(GTiff2Tiles.Core.Coordinates.Coordinate)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Coordinates.Coordinate.op_Subtraction(GTiff2Tiles.Core.Coordinates.Coordinate,GTiff2Tiles.Core.Coordinates.Coordinate)"/>
            <param name="other"><see cref="T:GTiff2Tiles.Core.Coordinates.Coordinate"/> to subtract</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.op_Multiply(GTiff2Tiles.Core.Coordinates.Coordinate,GTiff2Tiles.Core.Coordinates.Coordinate)">
            <summary>
            Multiply coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.Multiply(GTiff2Tiles.Core.Coordinates.Coordinate)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Coordinates.Coordinate.op_Multiply(GTiff2Tiles.Core.Coordinates.Coordinate,GTiff2Tiles.Core.Coordinates.Coordinate)"/>
            <param name="other"><see cref="T:GTiff2Tiles.Core.Coordinates.Coordinate"/> to multiply</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.op_Division(GTiff2Tiles.Core.Coordinates.Coordinate,GTiff2Tiles.Core.Coordinates.Coordinate)">
            <summary>
            Divide coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.Divide(GTiff2Tiles.Core.Coordinates.Coordinate)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Coordinates.Coordinate.op_Division(GTiff2Tiles.Core.Coordinates.Coordinate,GTiff2Tiles.Core.Coordinates.Coordinate)"/>
            <param name="other"><see cref="T:GTiff2Tiles.Core.Coordinates.Coordinate"/> to divide on</param>
        </member>
        <member name="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate">
            <summary>
            Abstract class for geographical coordinates
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeoCoordinate.#ctor(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeoCoordinate.ToNumber(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeoCoordinate.GetNumbers(GTiff2Tiles.Core.Coordinates.GeoCoordinate,GTiff2Tiles.Core.Coordinates.GeoCoordinate,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>s for specified <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/>s
            </summary>
            <param name="minCoordinate">Minimal <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/></param>
            <param name="maxCoordinate">Maximal <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/></param>
            <param name="zoom">Zoom</param>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>'s side size</param>
            <param name="tmsCompatible">Is <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> tme compatible?</param>
            <returns><see cref="T:System.ValueTuple"/> of <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>s</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeoCoordinate.ToPixelCoordinate(System.Int32,System.Int32)">
            <summary>
            Convert current <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/> to <see cref="T:GTiff2Tiles.Core.Coordinates.PixelCoordinate"/>
            </summary>
            <param name="zoom">Zoom</param>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>'s side size</param>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Coordinates.PixelCoordinate"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeoCoordinate.Resolution(System.Int32,System.Int32,GTiff2Tiles.Core.Enums.CoordinateSystem)">
            <summary>
            Resolution for given zoom level (measured at Equator)
            </summary>
            <param name="zoom">Zoom</param>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>'s side size</param>
            <param name="coordinateSystem">Desired coordinate system</param>
            <returns>Resolution value</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeoCoordinate.ZoomForPixelSize(System.Int32,System.Int32,GTiff2Tiles.Core.Enums.CoordinateSystem,System.Int32,System.Int32)">
            <summary>
            Calculate zoom from known pixel size
            </summary>
            <param name="pixelSize">Pixel size</param>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>'s side size</param>
            <param name="coordinateSystem">Desired coordinate system</param>
            <param name="minZoom">Minimal zoom
            <para/>0 by default</param>
            <param name="maxZoom">Maximal zoom
            <para/>32 by default</param>
            <returns>Approximate zoom value</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate">
            <summary>
            Class for EPSG:4326 coordinates
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.MaxPossibleLonValue">
            <summary>
            Maximal possible value of longitude for EPSG:4326
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.MaxPossibleLatValue">
            <summary>
            Maximal possible value of latitude for EPSG:4326
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.MinPossibleLonValue">
            <summary>
            Minimal possible value of longitude for EPSG:4326
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.MinPossibleLatValue">
            <summary>
            Minimal possible value of latitude for EPSG:4326
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.Longitude">
            <summary>
            Analogue of <see cref="P:GTiff2Tiles.Core.Coordinates.Coordinate.X"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.Latitude">
            <summary>
            Analogue of <see cref="P:GTiff2Tiles.Core.Coordinates.Coordinate.Y"/>
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.#ctor(System.Double,System.Double)">
            <inheritdoc />
            <param name="longitude"><see cref="P:GTiff2Tiles.Core.Coordinates.Coordinate.X"/> or Longitude</param>
            <param name="latitude"><see cref="P:GTiff2Tiles.Core.Coordinates.Coordinate.Y"/> or Latitude</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.ToPixelCoordinate(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.ToMercatorCoordinate">
            <summary>
            Convert current coordinate to <see cref="T:GTiff2Tiles.Core.Coordinates.MercatorCoordinate"/>
            </summary>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Coordinates.MercatorCoordinate"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.Resolution(System.Int32,System.Int32)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Coordinates.GeoCoordinate.Resolution(System.Int32,System.Int32,GTiff2Tiles.Core.Enums.CoordinateSystem)"/>
        </member>
        <member name="T:GTiff2Tiles.Core.Coordinates.ICoordinate">
            <summary>
            Interface for any coordinate
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Coordinates.ICoordinate.X">
            <summary>
            X coordinate value or Longitude
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Coordinates.ICoordinate.Y">
            <summary>
            Y coordinate value or Latitude
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.ICoordinate.ToNumber(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Calculate <see cref="T:GTiff2Tiles.Core.Tiles.Number"/> for current <see cref="T:GTiff2Tiles.Core.Coordinates.ICoordinate"/>
            </summary>
            <param name="zoom">Zoom</param>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>'s side size</param>
            <param name="tmsCompatible">Is <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> tms compatible?</param>
            <returns><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> in which this <see cref="T:GTiff2Tiles.Core.Coordinates.ICoordinate"/> belongs</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Coordinates.MercatorCoordinate">
            <summary>
            Class for EPSG:3857 coordinates
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.MaxPossibleLonValue">
            <summary>
            Maximal possible value of longitude for EPSG:3857
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.MaxPossibleLatValue">
            <summary>
            Maximal possible value of latitude for EPSG:3857
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.MinPossibleLonValue">
            <summary>
            Minimal possible value of longitude for EPSG:3857
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.MinPossibleLatValue">
            <summary>
            Minimal possible value of latitude for EPSG:3857
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.#ctor(System.Double,System.Double)">
            <inheritdoc />
            <param name="longitude"><see cref="P:GTiff2Tiles.Core.Coordinates.Coordinate.X"/> or Longitude</param>
            <param name="latitude"><see cref="P:GTiff2Tiles.Core.Coordinates.Coordinate.Y"/> or Latitude</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.ToPixelCoordinate(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.ToGeodeticCoordinate">
            <summary>
            Convert current coordinate to <see cref="T:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate"/>
            </summary>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.Resolution(System.Int32,System.Int32)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Coordinates.GeoCoordinate.Resolution(System.Int32,System.Int32,GTiff2Tiles.Core.Enums.CoordinateSystem)"/>
        </member>
        <member name="T:GTiff2Tiles.Core.Coordinates.PixelCoordinate">
            <summary>
            Coordinates in pixels
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.#ctor(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.ToNumber(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.ToGeoCoordinate(GTiff2Tiles.Core.Enums.CoordinateSystem,System.Int32,System.Int32)">
            <summary>
            Convert current coordinate to child of <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/>
            </summary>
            <param name="coordinateSystem">Desired coordinate system</param>
            <param name="zoom">Zoom</param>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>'s side size</param>
            <returns>Converted to <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/> value
            or <see langword="null"/> if something goes wrong</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.ToGeodeticCoordinate(System.Int32,System.Int32)">
            <summary>
            Convert current coordinate to <see cref="T:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate"/>
            </summary>
            <param name="zoom">Zoom</param>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>'s side size</param>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.ToMercatorCoordinate(System.Int32,System.Int32)">
            <summary>
            Convert current coordinate to <see cref="T:GTiff2Tiles.Core.Coordinates.MercatorCoordinate"/>
            </summary>
            <param name="zoom">Zoom</param>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>'s side size</param>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Coordinates.MercatorCoordinate"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.ToRasterPixelCoordinate(System.Int32,System.Int32)">
            <summary>
            Move the origin of pixel coordinates to top-left corner
            </summary>
            <param name="zoom">Zoom</param>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>'s side size</param>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Coordinates.PixelCoordinate"/></returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Enums.CoordinateSystem">
            <summary>
            Supported EPSG coordinate systems
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg4326">
            <summary>
            EPSG:4326
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg3857">
            <summary>
            EPSG:3857
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg3587">
            <summary>
            Replaced by <see cref="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg3857"/>
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg3785">
            <summary>
            Replaced by <see cref="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg3857"/>
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg41001">
            <summary>
            Replaced by <see cref="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg3857"/>
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg54004">
            <summary>
            Replaced by <see cref="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg3857"/>
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg102113">
            <summary>
            Replaced by <see cref="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg3857"/>
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg102100">
            <summary>
            Replaced by <see cref="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg3857"/>
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg900913">
            <summary>
            Replaced by <see cref="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Epsg3857"/>
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.CoordinateSystem.Other">
            <summary>
            Other or unknown coordinate system
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Enums.TileExtension">
            <summary>
            Extensions of ready tiles
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.TileExtension.Png">
            <summary>
            .png
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.TileExtension.Jpg">
            <summary>
            .jpg
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.TileExtension.Webp">
            <summary>
            .webp
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Enums.TileType">
            <summary>
            Types of tiles to create
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.TileType.Raster">
            <summary>
            Raster images
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Exceptions.GdalException">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.GdalException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.GdalException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.GdalException.#ctor">
            <inheritdoc />
        </member>
        <member name="T:GTiff2Tiles.Core.Exceptions.RasterException">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.RasterException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.RasterException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.RasterException.#ctor">
            <inheritdoc />
        </member>
        <member name="T:GTiff2Tiles.Core.Exceptions.TileException">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.TileException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.TileException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.TileException.#ctor">
            <inheritdoc />
        </member>
        <member name="T:GTiff2Tiles.Core.GdalWorker">
            <summary>
            Gdal's method to work with input files
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.GdalWorker._gdalProgress">
            <summary>
            Progress to report inside <see cref="M:GTiff2Tiles.Core.GdalWorker.GdalProgress(System.Double,System.IntPtr,System.IntPtr)"/>
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.GdalWorker.Byte">
            <summary>
            Type of bands
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.GdalWorker.SrsEpsg4326">
            <summary>
            -t_srs EPSG:4326
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.GdalWorker.SrsEpsg3857">
            <summary>
            -t_srs EPSG:3857
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.GdalWorker.ConvertCoordinateSystemOptions">
            <summary>
            Options for GdalWarp to convert GeoTIFF's coordinate system
            <remarks><para/>Requires you to add target system param (-t_srs)</remarks>
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.GdalWorker.TempFileName">
            <summary>
            Name for temporary (converted) GeoTIFF
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.GdalWorker.WarpAsync(System.String,System.String,System.String[],System.IProgress{System.Double})">
            <summary>
            Runs GdalWarp with passed parameters
            </summary>
            <param name="inputFilePath">Input GeoTiff's path</param>
            <param name="outputFilePath">Output file's path</param>
            <param name="options">Array of string parameters</param>
            <param name="progress">GdalWarp's progress</param>
            <returns><see langword="true"/> if operation was sucessful;
            <para/><see langword="false"/> otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.GdalWorker.InfoAsync(System.String,System.String[])">
            <summary>
            Runs GdalInfo with passed parameters
            </summary>
            <param name="inputFilePath">Input GeoTiff's path</param>
            <param name="options">Array of string parameters for GdalInfo</param>
            <returns><see cref="T:System.String"/> from GdalInfo if everything OK;
            <para/><see langword="null"/> otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.GdalWorker.ConfigureGdal">
            <summary>
            Initialize Gdal, if it hadn't been initialized yet
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.GdalWorker.GdalProgress(System.Double,System.IntPtr,System.IntPtr)">
            <summary>
            Realistaion of <see cref="T:OSGeo.GDAL.Gdal.GDALProgressFuncDelegate"/>
            </summary>
            <param name="complete">Current progress;
            <remarks><para/>values from 0.0 to 1.0</remarks></param>
            <param name="message"></param>
            <param name="data"></param>
            <returns>Always 1</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.GdalWorker.GetProjStringAsync(System.String)">
            <summary>
            Gets proj string of input file
            </summary>
            <param name="inputFilePath">Input GeoTiff's path</param>
            <returns>Proj <see cref="T:System.String"/> if everything OK;
            <para/><see langword="null"/> otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.GdalWorker.ConvertGeoTiffToTargetSystemAsync(System.String,System.String,GTiff2Tiles.Core.Enums.CoordinateSystem,System.IProgress{System.Double})">
            <summary>
            Converts current GeoTiff to a new file with target <see cref="T:GTiff2Tiles.Core.Enums.CoordinateSystem"/>
            through GdalWarp
            </summary>
            <param name="inputFilePath">Input GeoTiff's path</param>
            <param name="outputFilePath">Output file's path</param>
            <param name="targetSystem">Target <see cref="T:GTiff2Tiles.Core.Enums.CoordinateSystem"/></param>
            <param name="progress">GdalWarp's progress</param>
            <returns><see langword="true"/> if operation was sucessful;
            <para/><see langword="false"/> otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.GdalWorker.GetCoordinateSystem(System.String)">
            <summary>
            Gets supported coordinate system from proj string of GeoTIFF
            </summary>
            <param name="projString">Proj string of input GeoTIFF</param>
            <returns>Input file's <see cref="T:GTiff2Tiles.Core.Enums.CoordinateSystem"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.GdalWorker.GetGeoTransform(System.String)">
            <summary>
            Gets the coordinates and pixel sizes of image
            </summary>
            <param name="inputFilePath">Input GeoTiff's path</param>
            <returns>Array of double coordinates and pixel sizes if everything is OK;
            <para/><see langword="null"/> otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.GdalWorker.GetImageBorders(System.String,GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Enums.CoordinateSystem)">
            <summary>
            Gets the coordinates borders of the input Geotiff file
            </summary>
            <param name="inputFilePath">Input GeoTiff's path</param>
            <param name="size">Image's <see cref="T:GTiff2Tiles.Core.Images.Size"/>s</param>
            <param name="coordinateSystem">Desired coordinate system</param>
            <returns><see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/>s of this image borders if everything is OK;
            <para/>(<see langword="null"/>, <see langword="null"/>) otherwise</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff">
            <summary>
            Main interface for cropping different <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>s
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.Size">
            <summary>
            <see cref="T:GTiff2Tiles.Core.Images.Size"/> (width, height)
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.MinCoordinate">
            <summary>
            Minimal <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/> of this <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.MaxCoordinate">
            <summary>
            Maximal <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/> of this <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.GeoCoordinateSystem">
            <summary>
            Type of desired <see cref="T:GTiff2Tiles.Core.Enums.CoordinateSystem"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.IsDisposed">
            <summary>
            Shows if resources have already been disposed
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTileToFile(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.String)">
            <summary>
            Gets data from source <see cref="T:NetVips.Image"/>
            or tile cache for specified <see cref="T:GTiff2Tiles.Core.Tiles.RasterTile"/>
            and writes it to ready file
            </summary>
            <param name="tileCache">Source <see cref="T:NetVips.Image"/>
            or tile cache</param>
            <param name="tile">Target <see cref="T:GTiff2Tiles.Core.Tiles.RasterTile"/></param>
            <param name="interpolation">Interpolation of ready tiles</param>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTileToFileAsync(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.String)">
            <inheritdoc cref="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTileToFile(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.String)"/>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTileToEnumerable(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.String)">
            <summary>
            Gets data from source <see cref="T:NetVips.Image"/>
            or tile cache for specified <see cref="T:GTiff2Tiles.Core.Tiles.RasterTile"/>
            and writes it to <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="tileCache">Source <see cref="T:NetVips.Image"/>
            or tile cache</param>
            <param name="tile">Target <see cref="T:GTiff2Tiles.Core.Tiles.RasterTile"/></param>
            <param name="interpolation">Interpolation of ready tiles</param>
            <returns><see cref="T:GTiff2Tiles.Core.Tiles.RasterTile"/>'s <see cref="T:System.Byte"/>s</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTileToChannel(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.Threading.Channels.ChannelWriter{GTiff2Tiles.Core.Tiles.ITile},System.String)">
            <summary>
            Gets data from source <see cref="T:NetVips.Image"/>
            or tile cache for specified <see cref="T:GTiff2Tiles.Core.Tiles.RasterTile"/>
            and writes it to <see cref="T:System.Threading.Channels.ChannelWriter`1"/>
            </summary>
            <param name="tileCache">Source <see cref="T:NetVips.Image"/>
            or tile cache</param>
            <param name="tile">Target <see cref="T:GTiff2Tiles.Core.Tiles.RasterTile"/></param>
            <param name="channelWriter">Target <see cref="T:System.Threading.Channels.ChannelWriter`1"/></param>
            <param name="interpolation">Interpolation of ready tiles</param>
            <returns><see langword="true"/> if <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> was written;
            <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTileToChannelAsync(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.Threading.Channels.ChannelWriter{GTiff2Tiles.Core.Tiles.ITile},System.String)">
            <returns></returns>
            <inheritdoc cref="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTileToChannel(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.Threading.Channels.ChannelWriter{GTiff2Tiles.Core.Tiles.ITile},System.String)"/>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTilesToDirectory(System.String,System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)">
            <inheritdoc cref="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTilesToDirectoryAsync(System.String,System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)"/>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTilesToDirectoryAsync(System.String,System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)">
            <summary>
            Crops current <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/> on <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>s
            and writes them to <paramref name="outputDirectoryPath"/>
            </summary>
            <param name="outputDirectoryPath">Directory for output <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>s</param>
            <param name="tileExtension">Extension of ready <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>s
            <remarks><para/>.png by default</remarks></param>
            <returns></returns>
            <inheritdoc cref="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTilesToAsyncEnumerable(System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)"/>
            <param name="minZ"></param>
            <param name="maxZ"></param>
            <param name="tmsCompatible"></param>
            <param name="tileSize"></param>
            <param name="interpolation"></param>
            <param name="bandsCount"></param>
            <param name="tileCacheCount"></param>
            <param name="threadsCount">T</param>
            <param name="progress"></param>
            <param name="isPrintEstimatedTime"></param>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTilesToChannel(System.Threading.Channels.ChannelWriter{GTiff2Tiles.Core.Tiles.ITile},System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)">
            <inheritdoc cref="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTilesToChannelAsync(System.Threading.Channels.ChannelWriter{GTiff2Tiles.Core.Tiles.ITile},System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)"/>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTilesToChannelAsync(System.Threading.Channels.ChannelWriter{GTiff2Tiles.Core.Tiles.ITile},System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)">
            <summary>
            Crops current <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/> on <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>s
            and writes them to <paramref name="channelWriter"/>
            </summary>
            <param name="channelWriter"><see cref="T:System.Threading.Channels.Channel"/> to write <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> to</param>
            <returns></returns>
            <inheritdoc cref="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTilesToAsyncEnumerable(System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)"/>
            <param name="minZ"></param>
            <param name="maxZ"></param>
            <param name="tmsCompatible"></param>
            <param name="tileSize"></param>
            <param name="interpolation"></param>
            <param name="bandsCount"></param>
            <param name="tileCacheCount"></param>
            <param name="threadsCount"></param>
            <param name="progress"></param>
            <param name="isPrintEstimatedTime"></param>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTilesToEnumerable(System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)">
            <summary>
            Crops current <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/> on <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>s
            and writes them to <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>s</returns>
            <inheritdoc cref="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTilesToAsyncEnumerable(System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)"/>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.IGeoTiff.WriteTilesToAsyncEnumerable(System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)">
            <summary>
            Crops current <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/> on <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>s
            and writes them to <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            </summary>
            <param name="minZ">Minimum cropped zoom</param>
            <param name="maxZ">Maximum cropped zoom</param>
            <param name="tmsCompatible">Do you want to create tms-compatible <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>s?
            <remarks><para/><see langword="false"/> by default</remarks></param>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Images.Size"/> of <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>s
            <remarks><para/><see langword="null"/> by default, be sure to set it
            for custom implementations of <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/></remarks></param>
            <param name="interpolation">Interpolation of ready tiles
            <remarks><para/><see cref="F:GTiff2Tiles.Core.Constants.Interpolations.Lanczos3"/> by default</remarks></param>
            <param name="bandsCount">Count of <see cref="T:GTiff2Tiles.Core.Images.Band"/>s in ready <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>s
            <remarks><para/>4 by default</remarks></param>
            <param name="tileCacheCount">Count of <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> to be in cache
            <remarks><para/>1000 by default</remarks></param>
            <param name="threadsCount">Threads count
            <remarks><para/>Calculates automatically by default</remarks></param>
            <param name="progress">Progress-reporter
            <remarks><para/><see langword="null"/> by default</remarks></param>
            <param name="isPrintEstimatedTime">Do you want to see estimated time left?
            <remarks><para/><see langword="false"/> by default</remarks></param>
            <returns><see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> of <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>s</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.GeoTiffs.Img">
            <summary>
            Example of class to use <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/> interface.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Img.GenerateTilesAsync(System.IO.FileInfo,System.IO.DirectoryInfo,System.Int32,System.Int32,GTiff2Tiles.Core.Enums.TileType,GTiff2Tiles.Core.Enums.CoordinateSystem,System.Boolean,GTiff2Tiles.Core.Enums.TileExtension,System.IProgress{System.Double},System.Int32)">
            <summary>
            Example of method to use <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/> interface for cropping the tiles.
            </summary>
            <param name="inputFileInfo">Input GeoTIFF.</param>
            <param name="outputDirectoryInfo">Directory for cropped tiles.</param>
            <param name="minZ">Minimum cropped zoom.</param>
            <param name="maxZ">Maximum cropped zoom.</param>
            <param name="tileType">Type of tiles to create.</param>
            <param name="targetSystem"></param>
            <param name="tmsCompatible">Are tiles compatible with tms?</param>
            <param name="tileExtension">Extension of ready tiles.</param>
            <param name="progress">Progress.</param>
            <param name="threadsCount">Threads count.</param>
            <returns></returns>
        </member>
        <member name="T:GTiff2Tiles.Core.GeoTiffs.Raster">
            <summary>
            Class for creating <see cref="T:GTiff2Tiles.Core.Tiles.RasterTile"/>s
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.GeoTiffs.Raster._tempFileName">
            <summary>
            Name for temporary file
            <para/>see <see cref="M:GTiff2Tiles.Core.GeoTiffs.Raster.#ctor(System.Collections.Generic.IEnumerable{System.Byte},GTiff2Tiles.Core.Enums.CoordinateSystem)"/>
            and <see cref="M:GTiff2Tiles.Core.GeoTiffs.Raster.#ctor(System.IO.Stream,GTiff2Tiles.Core.Enums.CoordinateSystem)"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.GeoTiffs.Raster.Data">
            <summary>
            This <see cref="T:GTiff2Tiles.Core.GeoTiffs.Raster"/>'s data
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.GeoTiffs.Raster.Size">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.GeoTiffs.Raster.MinCoordinate">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.GeoTiffs.Raster.MaxCoordinate">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.GeoTiffs.Raster.GeoCoordinateSystem">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.GeoTiffs.Raster.IsDisposed">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.#ctor(System.String,GTiff2Tiles.Core.Enums.CoordinateSystem,System.Int64)">
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.GeoTiffs.Raster"/> object
            </summary>
            <param name="inputFilePath">Input GeoTiff's path</param>
            <param name="coordinateSystem">Desired coordinate system</param>
            <param name="maxMemoryCache">Max size of input image to store in RAM
            <remarks><para/>2GB by default</remarks></param>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.#ctor(System.Collections.Generic.IEnumerable{System.Byte},GTiff2Tiles.Core.Enums.CoordinateSystem)">
            <inheritdoc cref="M:GTiff2Tiles.Core.GeoTiffs.Raster.#ctor(System.String,GTiff2Tiles.Core.Enums.CoordinateSystem,System.Int64)"/>
            <param name="inputBytes"><see cref="T:System.Collections.Generic.IEnumerable`1"/> of GeoTiff's <see cref="T:System.Byte"/>s</param>
            <param name="coordinateSystem"></param>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.#ctor(System.IO.Stream,GTiff2Tiles.Core.Enums.CoordinateSystem)">
            <inheritdoc cref="M:GTiff2Tiles.Core.GeoTiffs.Raster.#ctor(System.String,GTiff2Tiles.Core.Enums.CoordinateSystem,System.Int64)"/>
            <param name="inputStream"><see cref="T:System.IO.Stream"/> with GeoTiff</param>
            <param name="coordinateSystem"></param>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.Dispose">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.Dispose(System.Boolean)">
            <inheritdoc cref="M:GTiff2Tiles.Core.GeoTiffs.Raster.Dispose"/>
            <param name="disposing">Dispose static fields?</param>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.CreateTileImage(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.String)">
            <summary>
            Create <see cref="T:NetVips.Image"/> for one <see cref="T:GTiff2Tiles.Core.Tiles.RasterTile"/>
            from input <see cref="T:NetVips.Image"/> or tile cache
            </summary>
            <param name="tileCache">Source <see cref="T:NetVips.Image"/>
            or tile cache</param>
            <param name="tile">Target <see cref="T:GTiff2Tiles.Core.Tiles.RasterTile"/></param>
            <param name="interpolation">Interpolation of ready tiles</param>
            <returns>Ready <see cref="T:NetVips.Image"/> for <see cref="T:GTiff2Tiles.Core.Tiles.RasterTile"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.WriteTileToFile(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.WriteTileToFileAsync(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.WriteTileToEnumerable(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.WriteTileToChannel(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.Threading.Channels.ChannelWriter{GTiff2Tiles.Core.Tiles.ITile},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.WriteTileToChannelAsync(NetVips.Image,GTiff2Tiles.Core.Tiles.RasterTile,System.Threading.Channels.ChannelWriter{GTiff2Tiles.Core.Tiles.ITile},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.WriteTilesToDirectory(System.String,System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.WriteTilesToDirectoryAsync(System.String,System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.WriteTilesToChannel(System.Threading.Channels.ChannelWriter{GTiff2Tiles.Core.Tiles.ITile},System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.WriteTilesToChannelAsync(System.Threading.Channels.ChannelWriter{GTiff2Tiles.Core.Tiles.ITile},System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.WriteTilesToEnumerable(System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.GeoTiffs.Raster.WriteTilesToAsyncEnumerable(System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size,System.String,System.Int32,System.Int32,System.Int32,System.IProgress{System.Double},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:GTiff2Tiles.Core.Helpers.CheckHelper">
            <summary>
            Class with static methods to check for errors
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.CheckHelper.CheckFile(System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Checks, if file's path is not empty string and file exists, if it should
            </summary>
            <param name="filePath">File's path to check</param>
            <param name="shouldExist">Should it exist?
            <remarks><para/>If set <see keyword="null"/>, existance doesn't check</remarks></param>
            <param name="fileExtension">Checks file extension
            <remarks><para/>If set <see keyword="null"/>, extension doesn't check</remarks></param>
            <returns><see langword="true"/> if everything is OK;
            <para/><see langword="false"/> otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.CheckHelper.CheckDirectory(System.String,System.Nullable{System.Boolean})">
            <summary>
            Checks, if directory's path is not empty, creates directory if it doesn't exist
            and checks if it's empty or not
            </summary>
            <param name="directoryPath">Directory's path to check</param>
            <param name="shouldBeEmpty">Should directory be empty?
            <remarks><para/>If set <see keyword="null"/>, emptyness doesn't check</remarks></param>
            <returns><see langword="true"/> if everything is OK;
            <para/><see langword="false"/> otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.CheckHelper.CheckInputFileAsync(System.String,GTiff2Tiles.Core.Enums.CoordinateSystem)">
            <summary>
            Checks the existance, projection and type
            </summary>
            <param name="inputFilePath">Input GeoTiff's path</param>
            <param name="targetSystem">Target coordinate system</param>
            <returns><see langword="true"/> if file needs to be converted;
            <para/><see langword="false"/> otherwise</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Helpers.GdalHelper">
            <summary>
            Configures all variables and options for GDAL including plugins and Proj6.db path
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Helpers.GdalHelper.IsConfigured">
            <summary>
            Shows if everything has been configured
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.GdalHelper.ConfigureAll">
            <summary>
            Setups gdalplugins and calls <see cref="M:OSGeo.GDAL.Gdal.AllRegister"/>,
            <see cref="M:OSGeo.OGR.Ogr.RegisterAll"/>,
            <see cref="M:MaxRev.Gdal.Core.Proj6.Configure"/>
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Helpers.NetVipsHelper">
            <summary>
            Some additional methods for NetVips
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.NetVipsHelper.DisableLog">
            <summary>
            Disables NetVips log warnings
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Helpers.ProgressHelper">
            <summary>
            Class with methods to simplify progress-reporting
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.ProgressHelper.PrintEstimatedTimeLeft(System.Double,System.Diagnostics.Stopwatch)">
            <summary>
            Prints estimated time left
            </summary>
            <param name="percentage">Current progress</param>
            <param name="stopwatch">Time passed from the start;
            <remarks>If set to <see langword="null"/> no time printed</remarks></param>
        </member>
        <member name="T:GTiff2Tiles.Core.Images.Area">
            <summary>
            Represents read/write <see cref="T:GTiff2Tiles.Core.Images.Area"/>s of <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Images.Area.OriginCoordinate">
            <summary>
            Origin <see cref="T:GTiff2Tiles.Core.Coordinates.PixelCoordinate"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Images.Area.Size">
            <summary>
            <see cref="P:GTiff2Tiles.Core.Images.Area.Size"/> of <see cref="T:GTiff2Tiles.Core.Images.Area"/>
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Area.#ctor(GTiff2Tiles.Core.Coordinates.PixelCoordinate,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Images.Area"/>
            </summary>
            <param name="originCoordinate"><see cref="P:GTiff2Tiles.Core.Images.Area.OriginCoordinate"/></param>
            <param name="size"><see cref="P:GTiff2Tiles.Core.Images.Area.Size"/></param>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Area.GetAreas(GTiff2Tiles.Core.Coordinates.GeoCoordinate,GTiff2Tiles.Core.Coordinates.GeoCoordinate,GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Coordinates.GeoCoordinate,GTiff2Tiles.Core.Coordinates.GeoCoordinate,GTiff2Tiles.Core.Images.Size)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Images.Area.GetAreas(GTiff2Tiles.Core.GeoTiffs.IGeoTiff,GTiff2Tiles.Core.Tiles.ITile)"/>
            <param name="imageMinCoordinate">Minimal <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/>
            of <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/></param>
            <param name="imageMaxCoordinate">Maximal <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/>
            of <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/></param>
            <param name="imageSize"><see cref="T:GTiff2Tiles.Core.Images.Size"/> of <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/></param>
            <param name="tileMinCoordinate">Minimal <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/>
            of <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/></param>
            <param name="tileMaxCoordinate">Maximal <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/>
            of <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/></param>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Images.Size"/> of <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/></param>
            <returns></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Area.GetAreas(GTiff2Tiles.Core.GeoTiffs.IGeoTiff,GTiff2Tiles.Core.Tiles.ITile)">
            <summary>
            Get <see cref="T:GTiff2Tiles.Core.Images.Area"/>s to read from input <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/>
            and to write to target <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>
            </summary>
            <param name="image">Source <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/></param>
            <param name="tile">Target <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/></param>
            <returns><see cref="T:System.ValueTuple"/> of <see cref="T:GTiff2Tiles.Core.Images.Area"/>s to read and write</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Images.Band">
            <summary>
            Represents <see cref="T:GTiff2Tiles.Core.GeoTiffs.Raster"/> band
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Images.Band.DefaultValue">
            <summary>
            Default <see cref="T:GTiff2Tiles.Core.Images.Band"/> value
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Images.Band.Value">
            <summary>
            Current value
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Band.#ctor(System.Int32)">
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Images.Band"/>
            </summary>
            <param name="value"><see cref="T:System.Int32"/> in range
            from 0 to 255</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Band.AddBands(NetVips.Image@,System.Collections.Generic.IEnumerable{GTiff2Tiles.Core.Images.Band})">
            <summary>
            Add <see cref="T:GTiff2Tiles.Core.Images.Band"/>s to <see cref="T:NetVips.Image"/>
            </summary>
            <param name="image">Reference on <see cref="T:NetVips.Image"/>
            to add <see cref="T:GTiff2Tiles.Core.Images.Band"/>s to</param>
            <param name="bands"><see cref="T:GTiff2Tiles.Core.Images.Band"/>s to add</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Band.AddDefaultBands(NetVips.Image@,System.Int32)">
            <summary>
            Add default <see cref="T:GTiff2Tiles.Core.Images.Band"/>s to <see cref="T:NetVips.Image"/> until
            bands count is lesser than <see cref="T:NetVips.Image"/>'s current bands count
            </summary>
            <param name="image">Reference on <see cref="T:NetVips.Image"/>
            to add <see cref="T:GTiff2Tiles.Core.Images.Band"/>s to</param>
            <param name="bandsCount">Count of desired <see cref="T:GTiff2Tiles.Core.Images.Band"/>s
            in <see cref="T:NetVips.Image"/>;
            <remarks>NOT the count of <see cref="T:GTiff2Tiles.Core.Images.Band"/>s to add</remarks></param>
        </member>
        <member name="T:GTiff2Tiles.Core.Images.Size">
            <summary>
            <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/>'s size
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Images.Size.Width">
            <summary>
            Image's width
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Images.Size.Height">
            <summary>
            Image's height
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Images.Size.Resolution">
            <summary>
            <see cref="T:GTiff2Tiles.Core.GeoTiffs.IGeoTiff"/>'s resolution
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Images.Size"/>
            </summary>
            <param name="width"><see cref="P:GTiff2Tiles.Core.Images.Size.Width"/></param>
            <param name="height"><see cref="P:GTiff2Tiles.Core.Images.Size.Height"/></param>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.Equals(GTiff2Tiles.Core.Images.Size)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.op_Equality(GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Check two <see cref="T:GTiff2Tiles.Core.Images.Size"/>s for equality
            </summary>
            <param name="size1"><see cref="T:GTiff2Tiles.Core.Images.Size"/> 1</param>
            <param name="size2"><see cref="T:GTiff2Tiles.Core.Images.Size"/> 2</param>
            <returns><see langword="true"/> if <see cref="T:GTiff2Tiles.Core.Images.Size"/>s are equal;
            <see langword="false"/>otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.op_Inequality(GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Check two <see cref="T:GTiff2Tiles.Core.Images.Size"/>s for non-equality
            </summary>
            <param name="size1"><see cref="T:GTiff2Tiles.Core.Images.Size"/> 1</param>
            <param name="size2"><see cref="T:GTiff2Tiles.Core.Images.Size"/> 2</param>
            <returns><see langword="true"/> if <see cref="T:GTiff2Tiles.Core.Images.Size"/>s are not equal;
            <see langword="false"/>otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.op_Addition(GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Sum <see cref="T:GTiff2Tiles.Core.Images.Size"/>s
            </summary>
            <param name="size1"><see cref="T:GTiff2Tiles.Core.Images.Size"/> 1</param>
            <param name="size2"><see cref="T:GTiff2Tiles.Core.Images.Size"/> 2</param>
            <returns>New <see cref="T:GTiff2Tiles.Core.Images.Size"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.Add(GTiff2Tiles.Core.Images.Size)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Images.Size.op_Addition(GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Images.Size)"/>
            <param name="other"><see cref="T:GTiff2Tiles.Core.Images.Size"/> to add</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.op_Subtraction(GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Subtruct <see cref="T:GTiff2Tiles.Core.Images.Size"/>s
            </summary>
            <param name="size1"><see cref="T:GTiff2Tiles.Core.Images.Size"/> 1</param>
            <param name="size2"><see cref="T:GTiff2Tiles.Core.Images.Size"/> 2</param>
            <returns>New <see cref="T:GTiff2Tiles.Core.Images.Size"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.Subtract(GTiff2Tiles.Core.Images.Size)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Images.Size.op_Subtraction(GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Images.Size)"/>
            <param name="other"><see cref="T:GTiff2Tiles.Core.Images.Size"/> to subtract</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.op_Multiply(GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Multiply <see cref="T:GTiff2Tiles.Core.Images.Size"/>s
            </summary>
            <param name="size1"><see cref="T:GTiff2Tiles.Core.Images.Size"/> 1</param>
            <param name="size2"><see cref="T:GTiff2Tiles.Core.Images.Size"/> 2</param>
            <returns>New <see cref="T:GTiff2Tiles.Core.Images.Size"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.Multiply(GTiff2Tiles.Core.Images.Size)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Images.Size.op_Multiply(GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Images.Size)"/>
            <param name="other"><see cref="T:GTiff2Tiles.Core.Images.Size"/> to multiply</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.op_Division(GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Divide <see cref="T:GTiff2Tiles.Core.Images.Size"/>s
            </summary>
            <param name="size1"><see cref="T:GTiff2Tiles.Core.Images.Size"/> 1</param>
            <param name="size2"><see cref="T:GTiff2Tiles.Core.Images.Size"/> 2</param>
            <returns>New <see cref="T:GTiff2Tiles.Core.Images.Size"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.Divide(GTiff2Tiles.Core.Images.Size)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Images.Size.op_Division(GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Images.Size)"/>
            <param name="other"><see cref="T:GTiff2Tiles.Core.Images.Size"/> to divide on</param>
        </member>
        <member name="T:GTiff2Tiles.Core.Localization.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.AlreadyExist">
            <summary>
              Looks up a localized string similar to {0} is already exist. Path:{1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.DirectoryIsEmpty">
            <summary>
              Looks up a localized string similar to Directory is empty. Please, select another directory. Path:{0}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.DirectoryIsntEmpty">
            <summary>
              Looks up a localized string similar to Directory isn&apos;t empty. Please, select another directory. Path:{0}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.DoesntExist">
            <summary>
              Looks up a localized string similar to {0} doesn&apos;t exist. Path:{1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.DoesntSupportPlatform">
            <summary>
              Looks up a localized string similar to {0} doesn&apos;t support current platform.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.EstimatedTime">
            <summary>
              Looks up a localized string similar to Estimated time:{0}Days:{1}, hours:{2}, minutes:{3}, seconds:{4}, ms:{5}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.IsNull">
            <summary>
              Looks up a localized string similar to {0} is null.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.LesserOrEqual">
            <summary>
              Looks up a localized string similar to {0} is lesser or equal {1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.LesserThan">
            <summary>
              Looks up a localized string similar to {0} is lesser, than {1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.StringIsEmpty">
            <summary>
              Looks up a localized string similar to {0} string is empty.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.TooMuchBands">
            <summary>
              Looks up a localized string similar to In the result tile is too much bands (&gt;5).
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToAddToCollection">
            <summary>
              Looks up a localized string similar to Unable to add value to {0} collection.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToCalculateCoordinates">
            <summary>
              Looks up a localized string similar to Unable to calculate tile&apos;s coordinate borders.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToConfigure">
            <summary>
              Looks up a localized string similar to Unable to configure {0}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToConvertCoordinatesToTiles">
            <summary>
              Looks up a localized string similar to Unable to convert coordinates into tile numbers.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToCreate">
            <summary>
              Looks up a localized string similar to Unable to create {0}. Path:{1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToCreateTile">
            <summary>
              Looks up a localized string similar to Unable to create tile. X:{0}, Y:{1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToGetCoordinates">
            <summary>
              Looks up a localized string similar to Unable to get {0} coordinate borders or sizes.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToJoin">
            <summary>
              Looks up a localized string similar to Unable to join {0}. X:{1}, Y:{2}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToOpen">
            <summary>
              Looks up a localized string similar to Unable to open {0}. Path:{1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToPrintDrivers">
            <summary>
              Looks up a localized string similar to Unable to print {0} drivers.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.WrongExtension">
            <summary>
              Looks up a localized string similar to {0} extension isn&apos;t {1}. Path:{2}.
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Tiles.ITile">
            <summary>
            Interface for all tiles
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.IsDisposed">
            <summary>
            Shows if <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>'s already disposed
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.MinCoordinate">
            <summary>
            Minimum <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/> of this <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.MaxCoordinate">
            <summary>
            Maximum <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/> of this <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.Number">
            <summary>
            <see cref="T:GTiff2Tiles.Core.Tiles.Number"/> of this <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.Bytes">
            <summary>
            <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> bytes
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.Size">
            <summary>
            <see cref="T:GTiff2Tiles.Core.Images.Size"/> (width, height) of this <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.Path">
            <summary>
            Path on disk of this <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.Extension">
            <summary>
            Extension of <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.TmsCompatible">
            <summary>
            Is <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> tms compatible?
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.ITile.Validate(System.Boolean,System.Int32)">
            <summary>
            Checks if this <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> is not empty or too small
            </summary>
            <param name="isCheckPath">Do you want to check <see cref="P:GTiff2Tiles.Core.Tiles.ITile.Path"/>?</param>
            <param name="minimalBytesCount">Minimal accepted count of <see cref="T:System.Byte"/>s in this tile</param>
            <returns><see langword="true"/> if <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>'s valid;
            <para/><see langword="false"/> otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.ITile.CalculatePosition">
            <summary>
            Calculates this <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> position in upper <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>
            </summary>
            <returns>Value in range from 0 to 3</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Tiles.Number">
            <summary>
            <see cref="T:GTiff2Tiles.Core.Tiles.Number"/> of <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Number.X">
            <summary>
            X <see cref="T:GTiff2Tiles.Core.Tiles.Number"/> value
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Number.Y">
            <summary>
            Y <see cref="T:GTiff2Tiles.Core.Tiles.Number"/> value
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Number.Z">
            <summary>
            Zoom
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>
            </summary>
            <param name="x"><see cref="P:GTiff2Tiles.Core.Tiles.Number.X"/></param>
            <param name="y"><see cref="P:GTiff2Tiles.Core.Tiles.Number.Y"/></param>
            <param name="z">Zoom</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.FlipY(System.Int32,System.Int32)">
            <summary>
            Flips value of passed <see cref="P:GTiff2Tiles.Core.Tiles.Number.Y"/>
            </summary>
            <param name="y"><see cref="P:GTiff2Tiles.Core.Tiles.Number.Y"/> to flip</param>
            <param name="z">Zoom</param>
            <returns>Converted <see cref="P:GTiff2Tiles.Core.Tiles.Number.Y"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.Flip">
            <summary>
            Flips <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>
            </summary>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Tiles.Number"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.Flip(GTiff2Tiles.Core.Tiles.Number)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Number.Flip"/>
            <param name="number"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> to flip</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.ToGeodeticCoordinates(GTiff2Tiles.Core.Images.Size)">
            <summary>
            Convert <see cref="T:GTiff2Tiles.Core.Tiles.Number"/> to <see cref="T:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate"/>s
            </summary>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Tiles.Tile"/> <see cref="T:GTiff2Tiles.Core.Images.Size"/></param>
            <returns><see cref="T:System.ValueTuple"/> of <see cref="T:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate"/>s</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.ToGeodeticCoordinates(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Images.Size)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Number.ToGeodeticCoordinates(GTiff2Tiles.Core.Images.Size)"/>
            <param name="number"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> to convert</param>
            <param name="tileSize"></param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.ToMercatorCoordinates(GTiff2Tiles.Core.Images.Size)">
            <summary>
            Convert <see cref="T:GTiff2Tiles.Core.Tiles.Number"/> to <see cref="T:GTiff2Tiles.Core.Coordinates.MercatorCoordinate"/>s
            </summary>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Tiles.Tile"/> <see cref="T:GTiff2Tiles.Core.Images.Size"/></param>
            <returns><see cref="T:System.ValueTuple"/> of <see cref="T:GTiff2Tiles.Core.Coordinates.MercatorCoordinate"/>s</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.ToMercatorCoordinates(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Images.Size)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Number.ToMercatorCoordinates(GTiff2Tiles.Core.Images.Size)"/>
            <param name="number"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> to convert</param>
            <param name="tileSize"></param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.ToGeoCoordinates(GTiff2Tiles.Core.Enums.CoordinateSystem,GTiff2Tiles.Core.Images.Size,System.Boolean)">
            <summary>
            Convert <see cref="T:GTiff2Tiles.Core.Tiles.Number"/> to <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/>s
            </summary>
            <param name="coordinateSystem">Desired coordinate system</param>
            <param name="tileSize"><see cref="T:GTiff2Tiles.Core.Tiles.Tile"/> <see cref="T:GTiff2Tiles.Core.Images.Size"/></param>
            <param name="tmsCompatible">Is tms compatible?</param>
            <returns><see cref="T:System.ValueTuple"/> of <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/>s</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.ToGeoCoordinates(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Enums.CoordinateSystem,GTiff2Tiles.Core.Images.Size,System.Boolean)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Number.ToGeoCoordinates(GTiff2Tiles.Core.Enums.CoordinateSystem,GTiff2Tiles.Core.Images.Size,System.Boolean)"/>
            <param name="number"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> to convert</param>
            <param name="coordinateSystem"></param>
            <param name="tileSize"></param>
            <param name="tmsCompatible"></param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.GetLowerNumbers(System.Int32)">
            <summary>
            Get lower <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>s for specified <see cref="T:GTiff2Tiles.Core.Tiles.Number"/> and zoom (>=10)
            </summary>
            <param name="z">Zoom;
            <remarks>must be >=10</remarks></param>
            <returns><see cref="T:System.ValueTuple"/> of lower <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>s</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.GetLowerNumbers(GTiff2Tiles.Core.Tiles.Number,System.Int32)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Number.GetLowerNumbers(System.Int32)"/>
            <param name="number">Base <see cref="T:GTiff2Tiles.Core.Tiles.Number"/></param>
            <param name="z"></param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.GetCount(GTiff2Tiles.Core.Coordinates.GeoCoordinate,GTiff2Tiles.Core.Coordinates.GeoCoordinate,System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Get count of <see cref="T:GTiff2Tiles.Core.Tiles.Tile"/>s in specified region
            </summary>
            <param name="minCoordinate">Minimum <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/></param>
            <param name="maxCoordinate">Maximum <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/></param>
            <param name="minZ">Minimum zoom</param>
            <param name="maxZ">Maximum zoom</param>
            <param name="tmsCompatible">Is tms compatible?</param>
            <param name="size"><see cref="T:GTiff2Tiles.Core.Tiles.Tile"/>'s <see cref="T:GTiff2Tiles.Core.Images.Size"/></param>
            <returns><see cref="T:GTiff2Tiles.Core.Tiles.Tile"/>s count</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.Equals(GTiff2Tiles.Core.Tiles.Number)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.op_Equality(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Tiles.Number)">
            <summary>
            Check two <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>s for equality
            </summary>
            <param name="number1"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> 1</param>
            <param name="number2"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> 2</param>
            <returns><see langword="true"/> if <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>s are equal;
            <see langword="false"/>otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.op_Inequality(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Tiles.Number)">
            <summary>
            Check two <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>s for non-equality
            </summary>
            <param name="number1"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> 1</param>
            <param name="number2"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> 2</param>
            <returns><see langword="true"/> if <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>s are not equal;
            <see langword="false"/>otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.op_Addition(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Tiles.Number)">
            <summary>
            Sum <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>s
            </summary>
            <param name="number1"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> 1</param>
            <param name="number2"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> 2</param>
            <returns>New <see cref="T:GTiff2Tiles.Core.Tiles.Number"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.Add(GTiff2Tiles.Core.Tiles.Number)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Number.op_Addition(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Tiles.Number)"/>
            <param name="other"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> to add</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.op_Subtraction(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Tiles.Number)">
            <summary>
            Subtruct <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>s
            </summary>
            <param name="number1"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> 1</param>
            <param name="number2"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> 2</param>
            <returns>New <see cref="T:GTiff2Tiles.Core.Tiles.Number"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.Subtract(GTiff2Tiles.Core.Tiles.Number)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Number.op_Subtraction(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Tiles.Number)"/>
            <param name="other"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> to subtract</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.op_Multiply(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Tiles.Number)">
            <summary>
            Multiply <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>s
            </summary>
            <param name="number1"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> 1</param>
            <param name="number2"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> 2</param>
            <returns>New <see cref="T:GTiff2Tiles.Core.Tiles.Number"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.Multiply(GTiff2Tiles.Core.Tiles.Number)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Number.op_Multiply(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Tiles.Number)"/>
            <param name="other"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> to multiply</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.op_Division(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Tiles.Number)">
            <summary>
            Divide <see cref="T:GTiff2Tiles.Core.Tiles.Number"/>s
            </summary>
            <param name="number1"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> 1</param>
            <param name="number2"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> 2</param>
            <returns>New <see cref="T:GTiff2Tiles.Core.Tiles.Number"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.Divide(GTiff2Tiles.Core.Tiles.Number)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Number.op_Division(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Tiles.Number)"/>
            <param name="other"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> to divide on</param>
        </member>
        <member name="T:GTiff2Tiles.Core.Tiles.RasterTile">
            <summary>
            <see cref="T:GTiff2Tiles.Core.GeoTiffs.Raster"/> <see cref="T:GTiff2Tiles.Core.Tiles.Tile"/>
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Tiles.RasterTile.DefaultBandsCount">
            <summary>
            Default count of bands
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.RasterTile.BandsCount">
            <summary>
            Count of bands in <see cref="T:GTiff2Tiles.Core.Tiles.RasterTile"/>
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.RasterTile.#ctor(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Enums.CoordinateSystem,GTiff2Tiles.Core.Images.Size,System.Collections.Generic.IEnumerable{System.Byte},System.String,System.Boolean,System.Int32)">
            <param name="bandsCount"><see cref="P:GTiff2Tiles.Core.Tiles.RasterTile.BandsCount"/></param>
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Tile.#ctor(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Enums.CoordinateSystem,GTiff2Tiles.Core.Images.Size,System.Collections.Generic.IEnumerable{System.Byte},System.String,System.Boolean)"/>
            <param name="number"></param>
            <param name="coordinateSystem"></param>
            <param name="size"></param>
            <param name="bytes"></param>
            <param name="extension"></param>
            <param name="tmsCompatible"></param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.RasterTile.#ctor(GTiff2Tiles.Core.Coordinates.GeoCoordinate,GTiff2Tiles.Core.Coordinates.GeoCoordinate,System.Int32,GTiff2Tiles.Core.Images.Size,System.Collections.Generic.IEnumerable{System.Byte},System.String,System.Boolean,System.Int32)">
            <param name="bandsCount"><see cref="P:GTiff2Tiles.Core.Tiles.RasterTile.BandsCount"/></param>
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Tile.#ctor(GTiff2Tiles.Core.Coordinates.GeoCoordinate,GTiff2Tiles.Core.Coordinates.GeoCoordinate,System.Int32,GTiff2Tiles.Core.Images.Size,System.Collections.Generic.IEnumerable{System.Byte},System.String,System.Boolean)"/>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <param name="zoom"></param>
            <param name="size"></param>
            <param name="bytes"></param>
            <param name="extension"></param>
            <param name="tmsCompatible"></param>
        </member>
        <member name="T:GTiff2Tiles.Core.Tiles.Tile">
            <summary>
            Basic implementation of <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> interface
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Tiles.Tile.DefaultSideSizeValue">
            <summary>
            Default value of <see cref="T:GTiff2Tiles.Core.Tiles.Tile"/>'s side size
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Tiles.Tile.DefaultSize">
            <summary>
            Default <see cref="T:GTiff2Tiles.Core.Tiles.Tile"/>'s <see cref="T:GTiff2Tiles.Core.Images.Size"/>
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Tiles.Tile.MinimalBytesCount">
            <summary>
            <see cref="T:GTiff2Tiles.Core.Tiles.Tile"/>s with <see cref="P:GTiff2Tiles.Core.Tiles.Tile.Bytes"/> count lesser
            than this value won't pass <see cref="M:GTiff2Tiles.Core.Tiles.Tile.Validate(System.Boolean,System.Int32)"/> check
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.MinCoordinate">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.MaxCoordinate">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.Number">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.Bytes">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.Size">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.Path">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.Extension">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.TmsCompatible">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.#ctor(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Enums.CoordinateSystem,GTiff2Tiles.Core.Images.Size,System.Collections.Generic.IEnumerable{System.Byte},System.String,System.Boolean)">
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Tiles.Tile"/>
            </summary>
            <param name="number"><see cref="P:GTiff2Tiles.Core.Tiles.Tile.Number"/></param>
            <param name="coordinateSystem">Desired coordinate system</param>
            <param name="size"><see cref="P:GTiff2Tiles.Core.Tiles.Tile.Size"/>;
            <remarks>should be a square, e.g. 256x256</remarks></param>
            <param name="bytes"><see cref="P:GTiff2Tiles.Core.Tiles.Tile.Bytes"/></param>
            <param name="extension"><see cref="P:GTiff2Tiles.Core.Tiles.Tile.Extension"/></param>
            <param name="tmsCompatible">Is tms compatible?</param>
            <exception cref="T:GTiff2Tiles.Core.Exceptions.TileException"></exception>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.#ctor(GTiff2Tiles.Core.Coordinates.GeoCoordinate,GTiff2Tiles.Core.Coordinates.GeoCoordinate,System.Int32,GTiff2Tiles.Core.Images.Size,System.Collections.Generic.IEnumerable{System.Byte},System.String,System.Boolean)">
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Tiles.Tile"/> from <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/> values
            </summary>
            <param name="minCoordinate">Minimum <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/></param>
            <param name="maxCoordinate">Maximum <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/></param>
            <param name="zoom">Zoom</param>
            <param name="size"><see cref="P:GTiff2Tiles.Core.Tiles.Tile.Size"/>;
            <remarks>should be a square, e.g. 256x256</remarks></param>
            <param name="bytes"><see cref="P:GTiff2Tiles.Core.Tiles.Tile.Bytes"/></param>
            <param name="extension"><see cref="P:GTiff2Tiles.Core.Tiles.Tile.Extension"/></param>
            <param name="tmsCompatible">Is tms compatible?</param>
            <exception cref="T:GTiff2Tiles.Core.Exceptions.TileException"></exception>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.Finalize">
            <summary>
            Calls <see cref="M:GTiff2Tiles.Core.Tiles.Tile.Dispose(System.Boolean)"/> on this <see cref="T:GTiff2Tiles.Core.Tiles.Tile"/>.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.Dispose">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.Dispose(System.Boolean)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Tile.Dispose"/>
            <param name="disposing">Dispose static fields?</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.CheckSize">
            <summary>
            Check if <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> is a square
            </summary>
            <returns><see langword="true"/> if it is a square;
            <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.CheckSize(GTiff2Tiles.Core.Tiles.ITile)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Tile.CheckSize"/>
            <param name="tile"><see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> to check</param>
            <returns></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.Validate(System.Boolean,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.Validate(GTiff2Tiles.Core.Tiles.ITile,System.Boolean,System.Int32)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Tile.Validate(System.Boolean,System.Int32)"/>
            <param name="tile"><see cref="T:GTiff2Tiles.Core.Tiles.Tile"/> to check</param>
            <param name="isCheckPath"></param>
            <param name="minimalBytesCount"></param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.CalculatePosition">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.CalculatePosition(GTiff2Tiles.Core.Tiles.Number,System.Boolean)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Tiles.Tile.CalculatePosition"/>
            <param name="number"><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> of <see cref="T:GTiff2Tiles.Core.Tiles.Tile"/></param>
            <param name="tmsCompatible">Is tms compatible?</param>
        </member>
    </members>
</doc>

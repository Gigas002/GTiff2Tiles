<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GTiff2Tiles.Core</name>
    </assembly>
    <members>
        <member name="T:GTiff2Tiles.Core.Constants.DateTimePatterns">
            <summary>
            String patterns for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.DateTimePatterns.LongWithMs">
            <summary>
            yyyyMMddHHmmssfff
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Constants.FileExtensions">
            <summary>
            Used extensions.
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.FileExtensions.Png">
            <summary>
            .png.
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.FileExtensions.Tif">
            <summary>
            .tif.
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.FileExtensions.Jpg">
            <summary>
            .webp
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.FileExtensions.Webp">
            <summary>
            .webp
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Constants.Gdal.Gdal">
            <summary>
            Static class with Gdal constants.
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Gdal.Gdal.LongLat">
            <summary>
            +proj=longlat
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Gdal.Gdal.Wgs84">
            <summary>
            +datum=WGS84
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Gdal.Gdal.Byte">
            <summary>
            Type=Byte
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Gdal.Gdal.RepairTifOptions">
            <summary>
            Options for GdalWarp.
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Gdal.Gdal.TempFileName">
            <summary>
            Name for temporary (converted) file.
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Geodesic.OriginShift">
            <summary>
            20037508.342789244
            2.0 * Math.PI * EquatorRadius 2.0;
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Constants.Image.Interpolations">
            <summary>
            Represents the interpolation algorithms.
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Image.Interpolations.Bicubic">
            <summary>
            Bicubic interpoilation.
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Constants.Image.Raster">
            <summary>
            <see cref="T:GTiff2Tiles.Core.Images.Raster"/> constants.
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Image.Raster.Bands">
            <summary>
            Number of bands in output tiles.
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Constants.Image.Raster.TileSize">
            <summary>
            Output tile's size.
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Coordinates.Coordinate">
            <summary>
            Basic realisation of <see cref="T:GTiff2Tiles.Core.Coordinates.ICoordinate"/> interface
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Coordinates.Coordinate.X">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Coordinates.Coordinate.Y">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.ToNumber(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.DegreesToRadians(System.Double)">
            <summary>
            Converts degrees to radians
            </summary>
            <param name="degrees">Value to convert</param>
            <returns>Converted radians</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.Coordinate.RadiansToDegrees(System.Double)">
            <summary>
            Converts radians to degrees
            </summary>
            <param name="radians">Value to convert</param>
            <returns>Converted degrees</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate">
            <summary>
            Abstract class for geographical coordinates
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeoCoordinate.ToNumber(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeoCoordinate.ToPixelCoordinate(System.Int32,System.Int32)">
            <summary>
            Convert current <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/> to <see cref="T:GTiff2Tiles.Core.Coordinates.PixelCoordinate"/>
            </summary>
            <param name="zoom">Zoom</param>
            <param name="tileSize">Tile's size</param>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Coordinates.PixelCoordinate"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeoCoordinate.Resolution(System.Int32,System.Int32)">
            <summary>
            Resolution for given zoom level (measured at Equator)
            </summary>
            <param name="zoom">Zoom</param>
            <param name="tileSize">Tile's size</param>
            <returns>Resolution value</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeoCoordinate.ZoomForPixelSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate zoom from known pixel size
            </summary>
            <param name="pixelSize">Pixel size</param>
            <param name="tileSize">Tile's size</param>
            <param name="minZoom">Minimal zoom
            <para/>0 by default</param>
            <param name="maxZoom">Maximal zoom
            <para/>32 by default</param>
            <returns>Approximate zoom value</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate">
            <summary>
            Class for EPSG:4326 coordinates
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.Longitude">
            <summary>
            Analogue of <see cref="P:GTiff2Tiles.Core.Coordinates.Coordinate.X"/>
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.Latitude">
            <summary>
            Analogue of <see cref="P:GTiff2Tiles.Core.Coordinates.Coordinate.Y"/>
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            Create instance of class
            </summary>
            <param name="longitude">Longitude or X</param>
            <param name="latitude">Latitude or Y</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.ToPixelCoordinate(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.ToMercatorCoordinate">
            <summary>
            Convert current coordinate to <see cref="T:GTiff2Tiles.Core.Coordinates.MercatorCoordinate"/>
            </summary>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Coordinates.MercatorCoordinate"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.Resolution(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.Resolution(GTiff2Tiles.Core.Coordinates.GeoCoordinate,System.Int32,System.Int32)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.Resolution(System.Int32,System.Int32)"/>
            <param name="coordinate">Safe to set to <see langword="null"/></param>
            <param name="zoom"></param>
            <param name="tileSize"></param>
            <returns></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.op_Addition(GTiff2Tiles.Core.Coordinates.GeodeticCoordinate,GTiff2Tiles.Core.Coordinates.GeodeticCoordinate)">
            <summary>
            Sum coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.op_Subtraction(GTiff2Tiles.Core.Coordinates.GeodeticCoordinate,GTiff2Tiles.Core.Coordinates.GeodeticCoordinate)">
            <summary>
            Subtruct coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.op_Multiply(GTiff2Tiles.Core.Coordinates.GeodeticCoordinate,GTiff2Tiles.Core.Coordinates.GeodeticCoordinate)">
            <summary>
            Multiply coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate.op_Division(GTiff2Tiles.Core.Coordinates.GeodeticCoordinate,GTiff2Tiles.Core.Coordinates.GeodeticCoordinate)">
            <summary>
            Divide coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Coordinates.ICoordinate">
            <summary>
            Interface for any coordinate
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Coordinates.ICoordinate.X">
            <summary>
            X coordinate value or Longitude
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Coordinates.ICoordinate.Y">
            <summary>
            Y coordinate value or Latitude
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.ICoordinate.ToNumber(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Calculate <see cref="T:GTiff2Tiles.Core.Tiles.Number"/> for current <see cref="T:GTiff2Tiles.Core.Coordinates.ICoordinate"/>
            </summary>
            <param name="zoom">Zoom</param>
            <param name="tileSize">Tile's size</param>
            <returns><see cref="T:GTiff2Tiles.Core.Tiles.Number"/> in which this <see cref="T:GTiff2Tiles.Core.Coordinates.ICoordinate"/> belongs</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Coordinates.MercatorCoordinate">
            <summary>
            Class for EPSG:3857 coordinates
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            Create instance of class
            </summary>
            <param name="x"><see cref="P:GTiff2Tiles.Core.Coordinates.Coordinate.X"/> or Longitude</param>
            <param name="y"><see cref="P:GTiff2Tiles.Core.Coordinates.Coordinate.Y"/> or Latitude</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.ToPixelCoordinate(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.ToGeodeticCoordinate">
            <summary>
            Convert current coordinate to <see cref="T:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate"/>
            </summary>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.Resolution(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.Resolution(GTiff2Tiles.Core.Coordinates.GeoCoordinate,System.Int32,System.Int32)">
            <inheritdoc cref="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.Resolution(System.Int32,System.Int32)"/>
            <param name="coordinate">Safe to set to <see langword="null"/></param>
            <param name="zoom"></param>
            <param name="tileSize"></param>
            <returns></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.op_Addition(GTiff2Tiles.Core.Coordinates.MercatorCoordinate,GTiff2Tiles.Core.Coordinates.MercatorCoordinate)">
            <summary>
            Sum coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.op_Subtraction(GTiff2Tiles.Core.Coordinates.MercatorCoordinate,GTiff2Tiles.Core.Coordinates.MercatorCoordinate)">
            <summary>
            Subtruct coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.op_Multiply(GTiff2Tiles.Core.Coordinates.MercatorCoordinate,GTiff2Tiles.Core.Coordinates.MercatorCoordinate)">
            <summary>
            Multiply coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.MercatorCoordinate.op_Division(GTiff2Tiles.Core.Coordinates.MercatorCoordinate,GTiff2Tiles.Core.Coordinates.MercatorCoordinate)">
            <summary>
            Divide coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Coordinates.PixelCoordinate">
            <summary>
            Coordinates in pixels
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            Create instance of class
            </summary>
            <param name="x">X coordinate value</param>
            <param name="y">Y coordinate value</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.ToNumber(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.ToGeoCoordinate``1(System.Int32,System.Int32)">
            <summary>
            Convert current coordinate to child of <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/>
            </summary>
            <typeparam name="T">Child of <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/></typeparam>
            <param name="zoom">Zoom</param>
            <param name="tileSize">Tile's size</param>
            <returns>Converted to <see cref="T:GTiff2Tiles.Core.Coordinates.GeoCoordinate"/> value
            or null if comething goes wrong</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.ToGeodeticCoordinate(System.Int32,System.Int32)">
            <summary>
            Convert current coordinate to <see cref="T:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate"/>
            </summary>
            <param name="zoom">Zoom</param>
            <param name="tileSize">Tile's size</param>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Coordinates.GeodeticCoordinate"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.ToMercatorCoordinate(System.Int32,System.Int32)">
            <summary>
            Convert current coordinate to <see cref="T:GTiff2Tiles.Core.Coordinates.MercatorCoordinate"/>
            </summary>
            <param name="zoom">Zoom</param>
            <param name="tileSize">Tile's size</param>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Coordinates.MercatorCoordinate"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.ToRasterPixelCoordinate(System.Int32,System.Int32)">
            <summary>
            Move the origin of pixel coordinates to top-left corner
            </summary>
            <param name="zoom">Zoom</param>
            <param name="tileSize">Tile's size</param>
            <returns>Converted <see cref="T:GTiff2Tiles.Core.Coordinates.PixelCoordinate"/></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.op_Addition(GTiff2Tiles.Core.Coordinates.PixelCoordinate,GTiff2Tiles.Core.Coordinates.PixelCoordinate)">
            <summary>
            Sum coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.op_Subtraction(GTiff2Tiles.Core.Coordinates.PixelCoordinate,GTiff2Tiles.Core.Coordinates.PixelCoordinate)">
            <summary>
            Subtruct coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.op_Multiply(GTiff2Tiles.Core.Coordinates.PixelCoordinate,GTiff2Tiles.Core.Coordinates.PixelCoordinate)">
            <summary>
            Multiply coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Coordinates.PixelCoordinate.op_Division(GTiff2Tiles.Core.Coordinates.PixelCoordinate,GTiff2Tiles.Core.Coordinates.PixelCoordinate)">
            <summary>
            Divide coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Enums.Image.TileExtension">
            <summary>
            Extensions of ready tiles
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.Image.TileExtension.Png">
            <summary>
            .png
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.Image.TileExtension.Jpg">
            <summary>
            .jpg
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.Image.TileExtension.Webp">
            <summary>
            .webp
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Enums.Image.TileType">
            <summary>
            Types of tiles to create
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Enums.Image.TileType.Raster">
            <summary>
            Raster images
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Exceptions.Gdal.GdalException">
            <inheritdoc />
            <summary>
            Exceptions, happened in Image.Gdal.cs.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.Gdal.GdalException.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Exceptions.Gdal.GdalException"/> object with passed error message.
            </summary>
            <param name="errorMessage">Error message.</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.Gdal.GdalException.#ctor(System.String,System.Exception)">
            <inheritdoc />
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Exceptions.Gdal.GdalException"/> object with passed error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="errorMessage">Error message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.Gdal.GdalException.#ctor">
            <inheritdoc />
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Exceptions.Gdal.GdalException"/> object without error message.
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Exceptions.Image.RasterException">
            <inheritdoc />
            <summary>
            Exceptions, happened in Image.Raster.cs.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.Image.RasterException.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Exceptions.Image.RasterException"/> object with passed error message.
            </summary>
            <param name="errorMessage">Error message.</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.Image.RasterException.#ctor(System.String,System.Exception)">
            <inheritdoc />
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Exceptions.Image.RasterException"/> object with passed error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="errorMessage">Error message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.Image.RasterException.#ctor">
            <inheritdoc />
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Exceptions.Image.RasterException"/> object without error message.
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Exceptions.Tile.TileException">
            <inheritdoc />
            <summary>
            Exceptions, happened in Tile.TileTileTools.cs.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.Tile.TileException.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Exceptions.Tile.TileException"/> object with passed error message.
            </summary>
            <param name="errorMessage">Error message.</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.Tile.TileException.#ctor(System.String,System.Exception)">
            <inheritdoc />
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Exceptions.Tile.TileException"/> object with passed error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="errorMessage">Error message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Exceptions.Tile.TileException.#ctor">
            <inheritdoc />
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Exceptions.Tile.TileException"/> object without error message.
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Gdal.Gdal">
            <summary>
            Gdal's method to work with input files.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Gdal.Gdal.WarpAsync(System.IO.FileInfo,System.IO.FileInfo,System.String[],OSGeo.GDAL.Gdal.GDALProgressFuncDelegate)">
            <summary>
            Runs GdalWarp with passed parameters.
            </summary>
            <param name="inputFileInfo">Input GeoTiff file.</param>
            <param name="outputFileInfo">Output file.</param>
            <param name="options">Array of string parameters.</param>
            <param name="callback">Delegate for progress reporting from Gdal.</param>
            <returns></returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Gdal.Gdal.InfoAsync(System.IO.FileInfo,System.String[])">
            <summary>
            Runs GdalInfo with passed parameters.
            </summary>
            <param name="inputFileInfo">Input GeoTiff file.</param>
            <param name="options">Array of string parameters for GdalInfo.</param>
            <returns><see cref="T:System.String"/> from GdalInfo.</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Gdal.Gdal.ConfigureGdal">
            <summary>
            Initialize Gdal, if it hadn't been initialized yet.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Gdal.Gdal.GetGeoTransform(System.IO.FileInfo)">
            <summary>
            Gets the coordinates and pixel sizes of image.
            </summary>
            <param name="inputFileInfo">Input GeoTiff file.</param>
            <returns>Array of double coordinates and pixel sizes.</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Gdal.Gdal.GetProj4StringAsync(System.IO.FileInfo)">
            <summary>
            Gets proj4 string of input file.
            </summary>
            <param name="inputFileInfo">Input GeoTiff file.</param>
            <returns>Proj4 string.</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Gdal.Gdal.GetImageBorders(System.IO.FileInfo,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Gets the coordinates borders of the input Geotiff file.
            </summary>
            <param name="inputFileInfo">Input GeoTiff file.</param>
            <param name="rasterXSize">Raster's width.</param>
            <param name="rasterYSize">Raster's height.</param>
            <returns><see cref="T:System.ValueTuple`4"/> with WGS84 coordinates.</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Geodesic.Coordinate">
            <summary>
            Coordinate
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Geodesic.Coordinate.Longitude">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Geodesic.Coordinate.Latitude">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Geodesic.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Creates coordinate instance
            </summary>
            <param name="longitude">Longitude</param>
            <param name="latitude">Latitude</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Geodesic.Coordinate.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Geodesic.Coordinate.Equals(GTiff2Tiles.Core.Geodesic.Coordinate)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Geodesic.Coordinate.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Geodesic.Coordinate.op_Equality(GTiff2Tiles.Core.Geodesic.Coordinate,GTiff2Tiles.Core.Geodesic.Coordinate)">
            <summary>
            Check two sizes for equality
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns><see langword="true"/> if coordinates are equal;
            <see langword="false"/>otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Geodesic.Coordinate.op_Inequality(GTiff2Tiles.Core.Geodesic.Coordinate,GTiff2Tiles.Core.Geodesic.Coordinate)">
            <summary>
            Check two sizes for non-equality
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns><see langword="true"/> if coordinates are not equal;
            <see langword="false"/>otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Geodesic.Coordinate.op_Addition(GTiff2Tiles.Core.Geodesic.Coordinate,GTiff2Tiles.Core.Geodesic.Coordinate)">
            <summary>
            Sum coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Geodesic.Coordinate.op_Subtraction(GTiff2Tiles.Core.Geodesic.Coordinate,GTiff2Tiles.Core.Geodesic.Coordinate)">
            <summary>
            Subtruct coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Geodesic.Coordinate.op_Multiply(GTiff2Tiles.Core.Geodesic.Coordinate,GTiff2Tiles.Core.Geodesic.Coordinate)">
            <summary>
            Multiply coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Geodesic.Coordinate.op_Division(GTiff2Tiles.Core.Geodesic.Coordinate,GTiff2Tiles.Core.Geodesic.Coordinate)">
            <summary>
            Divide coordinates
            </summary>
            <param name="coordinate1">Coordinate 1</param>
            <param name="coordinate2">Coordinate 2</param>
            <returns>New coordinate</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Helpers.CheckHelper">
            <summary>
            Class with static methods for check the errors.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.CheckHelper.CheckTifInfo(System.String,System.String)">
            <summary>
            Check GdalInfo's strings.
            Byte - type;
            </summary>
            <param name="gdalInfoString">String from <see cref="M:GTiff2Tiles.Core.Gdal.Gdal.InfoAsync(System.IO.FileInfo,System.String[])"/> method.</param>
            <param name="proj4String">Proj4 string.</param>
            <returns><see langword="true"/>, if file is OK, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.CheckHelper.CheckFile(System.IO.FileInfo,System.Boolean,System.String)">
            <summary>
            Checks, if file's path is not empty string and file exists, if it should.
            </summary>
            <param name="fileInfo">File to check.</param>
            <param name="shouldExist">Should it exist?</param>
            <param name="fileExtension">Checks file extension.</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.CheckHelper.CheckDirectory(System.IO.DirectoryInfo,System.Nullable{System.Boolean})">
            <summary>
            Checks, if directory's path is not empty, creates directory if it doesn't exist
            and checks if it's empty or not.
            </summary>
            <param name="directoryInfo">Directory to check.</param>
            <param name="shouldBeEmpty">Should directory be empty?
            <para/>If set <see keyword="null"/>, emptyness doesn't check.</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.CheckHelper.CheckInputFileAsync(System.IO.FileInfo)">
            <summary>
            Checks the existance, projection and type.
            </summary>
            <param name="inputFileInfo">Input file.</param>
            <returns><see langword="true"/> if no errors in input file, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Helpers.GdalHelper">
            <summary>
            Configures all variables and options for GDAL including plugins and Proj6.db path
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Helpers.GdalHelper.IsConfigured">
            <summary>
            Shows if everything has been configured.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.GdalHelper.ConfigureAll">
            <summary>
            Setups gdalplugins and calls Gdal.AllRegister(), Ogr.RegisterAll(), Proj6.Configure().
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Helpers.NetVipsHelper">
            <summary>
            Some additional methods for NetVips.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.NetVipsHelper.DisableLog">
            <summary>
            Disables NetVips log warnings.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Helpers.ProgressHelper.PrintEstimatedTimeLeft(System.Double,System.Diagnostics.Stopwatch)">
            <summary>
            Prints estimated time left.
            </summary>
            <param name="percentage">Current progress.</param>
            <param name="stopwatch">Get elapsed time from this.</param>
        </member>
        <member name="T:GTiff2Tiles.Core.Images.IImage">
            <summary>
            Main interface for cropping different tiles.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Images.IImage.IsDisposed">
            <summary>
            Shows if resources have already been disposed.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.IImage.WriteTilesToDirectoryAsync(System.IO.DirectoryInfo,System.Int32,System.Int32,GTiff2Tiles.Core.Images.Size,System.Boolean,System.String,System.Int32,System.IProgress{System.Double},System.Int32,System.Boolean,System.Int32)">
            <summary>
            Crops input tiff for each zoom.
            </summary>
            <param name="outputDirectoryInfo">Output directory.</param>
            <param name="minZ">Minimum cropped zoom.</param>
            <param name="maxZ">Maximum cropped zoom.</param>
            <param name="tmsCompatible">Do you want to create tms-compatible tiles?</param>
            <param name="tileExtension">Extension of ready tiles.</param>
            <param name="progress">Progress.</param>
            <param name="threadsCount">Threads count.</param>
            <returns></returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Images.Img">
            <summary>
            Example of class to use <see cref="T:GTiff2Tiles.Core.Images.IImage"/> interface.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Img.GenerateTilesAsync(System.IO.FileInfo,System.IO.DirectoryInfo,System.Int32,System.Int32,GTiff2Tiles.Core.Enums.Image.TileType,System.Boolean,GTiff2Tiles.Core.Enums.Image.TileExtension,System.IProgress{System.Double},System.Int32)">
            <summary>
            Example of method to use <see cref="T:GTiff2Tiles.Core.Images.IImage"/> interface for cropping the tiles.
            </summary>
            <param name="inputFileInfo">Input GeoTIFF.</param>
            <param name="outputDirectoryInfo">Directory for cropped tiles.</param>
            <param name="minZ">Minimum cropped zoom.</param>
            <param name="maxZ">Maximum cropped zoom.</param>
            <param name="tileType">Type of tiles to create.</param>
            <param name="tmsCompatible">Are tiles compatible with tms?</param>
            <param name="tileExtension">Extension of ready tiles.</param>
            <param name="progress">Progress.</param>
            <param name="threadsCount">Threads count.</param>
            <returns></returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Images.Raster">
            <summary>
            Class for creating raster tiles.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Images.Raster.Data">
            <summary>
            This image's data.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Images.Raster.Size">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Images.Raster.MinCoordinate">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Images.Raster.MaxCoordinate">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Images.Raster.IsDisposed">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Raster.#ctor(System.IO.FileInfo,System.Int64)">
            <summary>
            Creates new <see cref="T:GTiff2Tiles.Core.Images.Raster"/> object.
            </summary>
            <param name="inputFileInfo">Input GeoTiff image.</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Raster.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Raster.Dispose">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Raster.Dispose(System.Boolean)">
            <summary>
            Actually disposes the data.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Raster.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Raster.CreateTileImage(NetVips.Image,GTiff2Tiles.Core.Tiles.ITile,System.Int32)">
            <summary>
            Writes one tile of current zoom.
            <para/>Crops zoom directly from input image.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Raster.WriteTilesToDirectoryAsync(System.IO.DirectoryInfo,System.Int32,System.Int32,GTiff2Tiles.Core.Images.Size,System.Boolean,System.String,System.Int32,System.IProgress{System.Double},System.Int32,System.Boolean,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:GTiff2Tiles.Core.Images.Size">
            <summary>
            Image size
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Images.Size.Width">
            <summary>
            Image's width
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Images.Size.Height">
            <summary>
            Image's height
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates size instance
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.GetResoultion">
            <summary>
            Gets resolution
            </summary>
            <returns>Resolution of this size</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.Equals(GTiff2Tiles.Core.Images.Size)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.op_Equality(GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Check two sizes for equality
            </summary>
            <param name="size1">Size 1</param>
            <param name="size2">Size 2</param>
            <returns><see langword="true"/> if sizes are equal;
            <see langword="false"/>otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.op_Inequality(GTiff2Tiles.Core.Images.Size,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Check two sizes for non-equality
            </summary>
            <param name="size1">Size 1</param>
            <param name="size2">Size 2</param>
            <returns><see langword="true"/> if sizes are not equal;
            <see langword="false"/>otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Images.Size.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:GTiff2Tiles.Core.Localization.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.AlreadyExist">
            <summary>
              Looks up a localized string similar to {0} is already exist. Path:{1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.DirectoryIsEmpty">
            <summary>
              Looks up a localized string similar to Directory is empty. Please, select another directory. Path:{0}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.DirectoryIsntEmpty">
            <summary>
              Looks up a localized string similar to Directory isn&apos;t empty. Please, select another directory. Path:{0}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.DoesntExist">
            <summary>
              Looks up a localized string similar to {0} doesn&apos;t exist. Path:{1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.DoesntSupportPlatform">
            <summary>
              Looks up a localized string similar to {0} doesn&apos;t support current platform.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.EstimatedTime">
            <summary>
              Looks up a localized string similar to Estimated time:{0}Days:{1}, hours:{2}, minutes:{3}, seconds:{4}, ms:{5}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.IsNull">
            <summary>
              Looks up a localized string similar to {0} is null.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.LesserOrEqual">
            <summary>
              Looks up a localized string similar to {0} is lesser or equal {1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.LesserThan">
            <summary>
              Looks up a localized string similar to {0} is lesser, than {1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.StringIsEmpty">
            <summary>
              Looks up a localized string similar to {0} string is empty.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.TooMuchBands">
            <summary>
              Looks up a localized string similar to In the result tile is too much bands (&gt;5).
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToAddToCollection">
            <summary>
              Looks up a localized string similar to Unable to add value to {0} collection.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToCalculateCoordinates">
            <summary>
              Looks up a localized string similar to Unable to calculate tile&apos;s coordinate borders.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToConfigure">
            <summary>
              Looks up a localized string similar to Unable to configure {0}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToConvertCoordinatesToTiles">
            <summary>
              Looks up a localized string similar to Unable to convert coordinates into tile numbers.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToCreate">
            <summary>
              Looks up a localized string similar to Unable to create {0}. Path:{1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToCreateTile">
            <summary>
              Looks up a localized string similar to Unable to create tile. X:{0}, Y:{1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToGetCoordinates">
            <summary>
              Looks up a localized string similar to Unable to get {0} coordinate borders or sizes.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToJoin">
            <summary>
              Looks up a localized string similar to Unable to join {0}. X:{1}, Y:{2}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToOpen">
            <summary>
              Looks up a localized string similar to Unable to open {0}. Path:{1}.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.UnableToPrintDrivers">
            <summary>
              Looks up a localized string similar to Unable to print {0} drivers.
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Localization.Strings.WrongExtension">
            <summary>
              Looks up a localized string similar to {0} extension isn&apos;t {1}. Path:{2}.
            </summary>
        </member>
        <member name="T:GTiff2Tiles.Core.Tiles.ITile">
            <summary>
            Interface for all tiles
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.IsDisposed">
            <summary>
            Shows if tile's already disposed
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.MinCoordinate">
            <summary>
            Minimum coordinate of this tile
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.MaxCoordinate">
            <summary>
            Maximum coordinate of this tile
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.Number">
            <summary>
            Number of this tile
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.Bytes">
            <summary>
            Tile bytes
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.Size">
            <summary>
            Size (width, height) of this tile
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.FileInfo">
            <summary>
            FileInfo that represents this tile
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.Extension">
            <summary>
            Extension of tile
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.ITile.TmsCompatible">
            <summary>
            Is tile tms compatible?
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.ITile.Validate(System.Boolean)">
            <summary>
            Checks if this tile is not empty or too small
            </summary>
            <param name="isCheckFileInfo">Do you want to check <see cref="P:GTiff2Tiles.Core.Tiles.ITile.FileInfo"/>?</param>
            <returns><see langword="true"/> if tile's valid, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.ITile.CalculatePosition">
            <summary>
            Calculates this tile position in upper tile
            </summary>
            <returns>Value in range from 0 to 3</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.ITile.GetNumbersFromCoords">
            <summary>
            Get minimum/maximum numbers from this tile's coordinates
            </summary>
            <returns><see cref="T:System.ValueTuple"/> of numbers</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.ITile.GetLowerNumbers(System.Int32)">
            <summary>
            Get lower tiles on specified zoom for current tile
            </summary>
            <param name="zoom">Zoom on which you want to know tile's numbers</param>
            <returns><see cref="T:System.ValueTuple"/> of numbers</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.ITile.GetCount(System.Int32,System.Int32)">
            <summary>
            Get number of tiles in current region from minimum zoom to maximum
            </summary>
            <param name="minZ">Minimum zoom</param>
            <param name="maxZ">Maximum zoom</param>
            <returns>Tiles count</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.ITile.GetCoordinates">
            <summary>
            Get coordinates of current tile
            </summary>
            <returns><see cref="T:System.ValueTuple"/> of WGS84 coordinates</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Tiles.Number">
            <summary>
            Number of tile
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Number.X">
            <summary>
            X number
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Number.Y">
            <summary>
            Y number
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Number.Z">
            <summary>
            Zoom
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes number
            </summary>
            <param name="x">X number</param>
            <param name="y">Y number</param>
            <param name="z">Zoom</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.Equals(GTiff2Tiles.Core.Tiles.Number)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.op_Equality(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Tiles.Number)">
            <summary>
            Check two numbers for equality
            </summary>
            <param name="num1">Number 1</param>
            <param name="num2">Number 2</param>
            <returns><see langword="true"/> if numbers are equal;
            <see langword="false"/>otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.op_Inequality(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Tiles.Number)">
            <summary>
            Check two numbers for non-equality
            </summary>
            <param name="num1">Number 1</param>
            <param name="num2">Number 2</param>
            <returns><see langword="true"/> if numbers are not equal;
            <see langword="false"/>otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.FlipY(System.Int32,System.Int32)">
            <summary>
            Converts y number
            </summary>
            <param name="y">Number.Y</param>
            <param name="z">Zoom</param>
            <returns>Converted Number.Y</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.Flip">
            <summary>
            Flips this number
            </summary>
            <returns>Converted number</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.Flip(GTiff2Tiles.Core.Tiles.Number)">
            <summary>
            Flips number
            </summary>
            <param name="number">Number to flip</param>
            <returns>Converted number</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.GetLowerNumbers(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.GetLowerNumbers(GTiff2Tiles.Core.Tiles.Number,System.Int32)">
            <summary>
            Get lower numbers for specified number and zoom
            </summary>
            <param name="number">Base number</param>
            <param name="zoom">Zoom</param>
            <returns><see cref="T:System.ValueTuple"/> of lower numbers</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Number.GetCount(GTiff2Tiles.Core.Coordinates.GeoCoordinate,GTiff2Tiles.Core.Coordinates.GeoCoordinate,System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Get number of tiles in specified region
            </summary>
            <param name="minCoordinate">Minimum coordinate</param>
            <param name="maxCoordinate">Maximum coordinate</param>
            <param name="minZ">Minimum zoom</param>
            <param name="maxZ">Maximum zoom</param>
            <param name="tmsCompatible">Is tms compatible?</param>
            <param name="size">Tile size</param>
            <returns>Tiles count</returns>
        </member>
        <member name="T:GTiff2Tiles.Core.Tiles.RasterTile">
            <summary>
            Raster tile
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Tiles.RasterTile.DefaultBandsCount">
            <summary>
            Default number of bands
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.RasterTile.BandsCount">
            <summary>
            Number of bands in tile
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.RasterTile.#ctor(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Images.Size,System.Collections.Generic.IEnumerable{System.Byte},System.String,System.Boolean,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.RasterTile.#ctor(GTiff2Tiles.Core.Geodesic.Coordinate,GTiff2Tiles.Core.Geodesic.Coordinate,System.Int32,GTiff2Tiles.Core.Images.Size,System.Collections.Generic.IEnumerable{System.Byte},System.String,System.Boolean,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:GTiff2Tiles.Core.Tiles.Tile">
            <summary>
            Basic implementation of <see cref="T:GTiff2Tiles.Core.Tiles.ITile"/> interface
            </summary>
        </member>
        <member name="F:GTiff2Tiles.Core.Tiles.Tile.DefaultSize">
            <summary>
            Default tile size
            </summary>
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.MinCoordinate">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.MaxCoordinate">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.Number">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.Bytes">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.Size">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.FileInfo">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.Extension">
            <inheritdoc />
        </member>
        <member name="P:GTiff2Tiles.Core.Tiles.Tile.TmsCompatible">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.#ctor(GTiff2Tiles.Core.Tiles.Number,GTiff2Tiles.Core.Images.Size,System.Collections.Generic.IEnumerable{System.Byte},System.String,System.Boolean)">
            <summary>
            Creates new tile
            </summary>
            <param name="number">Tile number</param>
            <param name="size">Tile size</param>
            <param name="d">Tile bytes</param>
            <param name="extension">Tile extension</param>
            <param name="tmsCompatible">Is tms compatible?</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.#ctor(GTiff2Tiles.Core.Geodesic.Coordinate,GTiff2Tiles.Core.Geodesic.Coordinate,System.Int32,GTiff2Tiles.Core.Images.Size,System.Collections.Generic.IEnumerable{System.Byte},System.String,System.Boolean)">
            <summary>
            Creates new tile from coordinate values
            </summary>
            <param name="minCoordinate">Minimum coordinate</param>
            <param name="maxCoordinate">Maximum coordinate</param>
            <param name="z">Zoom</param>
            <param name="size">Tile size</param>
            <param name="d">Tile bytes</param>
            <param name="extension">Tile extension</param>
            <param name="tmsCompatible">Is tms compatible?</param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.Finalize">
            <summary>
            Calls <see cref="M:GTiff2Tiles.Core.Tiles.Tile.Dispose(System.Boolean)"/> on this tile.
            </summary>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.Dispose">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.Dispose(System.Boolean)">
            <summary>
            Actually disposes the data.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.Resolution">
            <summary>
            Resolution for tile
            </summary>
            <returns>Resoultion value</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.Resolution(System.Int32,System.Int32)">
            <summary>
            Resolution for tile
            </summary>
            <param name="zoom">Zoom value</param>
            <param name="tileSize">Tile's size</param>
            <returns>Resoultion value</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.Validate(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.Validate(GTiff2Tiles.Core.Tiles.ITile,System.Boolean)">
            <summary>
            Check if tile is not null, empty, not soo small and exists
            </summary>
            <param name="tile">Tile to check</param>
            <param name="isCheckFileInfo">Do you want to check if file exists?</param>
            <returns><see langword="true"/> if tile's valid, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.CalculatePosition">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.CalculatePosition(GTiff2Tiles.Core.Tiles.Number,System.Boolean)">
            <summary>
            Calculates tile position in upper tile
            </summary>
            <param name="number">Number of tile</param>
            <param name="tmsCompatible">Is tile tms compatible?</param>
            <returns>Value in range from 0 to 3</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.GetNumbersFromCoords">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.GetNumbersFromCoords(GTiff2Tiles.Core.Geodesic.Coordinate,GTiff2Tiles.Core.Geodesic.Coordinate,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Calculates tile numbers for zoom which covers given WGS84 coordinates
            </summary>
            <param name="minCoordinate">Minimum coordinate</param>
            <param name="maxCoordinate">Maximum coordinate</param>
            <param name="zoom">Zoom</param>
            <param name="tmsCompatible">Is tile tms compatible?</param>
            <param name="size">Tile size</param>
            <returns><see cref="T:System.ValueTuple"/> of numbers</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.GetLowerNumbers(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.GetLowerNumbers(GTiff2Tiles.Core.Tiles.Number,System.Int32)">
            <summary>
            Get lower numbers for specified number and zoom
            </summary>
            <param name="number">Base number</param>
            <param name="zoom">Zoom</param>
            <returns><see cref="T:System.ValueTuple"/> of lower numbers</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.GetCoordinates">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.GetCoordinates(GTiff2Tiles.Core.Tiles.Number,System.Boolean,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Get coordinates by specified parameters
            </summary>
            <param name="number">Tile number</param>
            <param name="tmsCompatible">Is tms compatible?</param>
            <param name="size">Tile size</param>
            <returns><see cref="T:System.ValueTuple"/> of WGS84 coordinates</returns>
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.GetCount(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GTiff2Tiles.Core.Tiles.Tile.GetCount(GTiff2Tiles.Core.Geodesic.Coordinate,GTiff2Tiles.Core.Geodesic.Coordinate,System.Int32,System.Int32,System.Boolean,GTiff2Tiles.Core.Images.Size)">
            <summary>
            Get number of tiles in specified region
            </summary>
            <param name="minCoordinate">Minimum coordinate</param>
            <param name="maxCoordinate">Maximum coordinate</param>
            <param name="minZ">Minimum zoom</param>
            <param name="maxZ">Maximum zoom</param>
            <param name="tmsCompatible">Is tms compatible?</param>
            <param name="size">Tile size</param>
            <returns>Tiles count</returns>
        </member>
    </members>
</doc>
